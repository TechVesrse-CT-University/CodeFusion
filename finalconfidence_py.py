# -*- coding: utf-8 -*-
"""FinalConfidence.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ctqncgFKBNch5MkStqlf3nLhT8_5308e
"""

import tkinter as tk
from tkinter import filedialog, messagebox
from transformers import pipeline
from PIL import Image

# Step 1: Load Deepfake Detection Model
def load_model():
    try:
        deepfake_detector = pipeline("image-classification", model="Wvolf/ViT_Deepfake_Detection")
        print("âœ… Model loaded successfully!")
        return deepfake_detector
    except Exception as e:
        messagebox.showerror("Error", f"Failed to load the model: {e}")
        return None

# Step 2: Deepfake Detection Function
def detect_deepfake(image_path, model):
    try:
        result = model(image_path)
        prediction = max(result, key=lambda x: x['score'])  # Find label with highest score
        label = prediction['label']
        confidence = prediction['score'] * 100  # Convert to percentage
        return label, confidence
    except Exception as e:
        return None, None

# Step 3: File Upload Handler
def upload_and_detect():
    file_path = filedialog.askopenfilename(title="Select an Image", filetypes=[("Image Files", "*.jpg;*.jpeg;*.png")])
    if file_path:
        try:
            image = Image.open(file_path)
            image.show()  # Display the uploaded image
            label, confidence = detect_deepfake(file_path, model)
            if label and confidence:
                result_label.config(text=f"Detection Result:\nLabel: {label}\nConfidence: {confidence:.2f}%")
            else:
                result_label.config(text="Error: Unable to process the image.")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred while processing the image: {e}")

# Step 4: Set Up GUI
window = tk.Tk()
window.title("Deepfake Detection Tool")

# Load the deepfake detection model
model = load_model()
if not model:
    tk.Label(window, text="Error: Failed to load the model. Check the logs.", fg="red").pack()
else:
    tk.Label(window, text="Deepfake Detection Model Loaded Successfully!", fg="green").pack()

# Add Upload Button
upload_button = tk.Button(window, text="Upload Image and Detect", command=upload_and_detect)
upload_button.pack(pady=10)

# Add Result Label
result_label = tk.Label(window, text="Detection Results Will Appear Here", wraplength=400, justify="left")
result_label.pack(pady=10)

# Run GUI
window.mainloop()