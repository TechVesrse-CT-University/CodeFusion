# -*- coding: utf-8 -*-
"""WebScrapper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/163T6rX0jWtqcrQ86MPfkD2OtAEU-fOH1
"""

# Step 1: Upload Image in Colab
from google.colab import files

# This will prompt you to upload an image during runtime
uploaded = files.upload()

# Step 2: Get the path of the uploaded image
image_path = list(uploaded.keys())[0]  # This gives you the filename of the uploaded image

# Step 3: ImgBB API Key
imgbb_api_key = '47cf5c6318ae2fc7d1ea3305189942c4'  # Replace with your ImgBB API key

!pip install serpapi

!pip uninstall -y serpapi
!pip install serpapi

!pip install google-search-results

!pip install serpapi requests

import requests

# Function to upload an image to ImgBB and return the image URL
def upload_image_to_imgbb(image_path, api_key):
    url = "https://api.imgbb.com/1/upload"
    with open(image_path, 'rb') as image_file:
        response = requests.post(url, data={'key': api_key}, files={'image': image_file})
    data = response.json()
    if response.status_code == 200 and 'data' in data:
        return data['data']['url']
    else:
        return None

!pip uninstall -y serpapi
!pip install serpapi

!pip install google-search-results

!pip install serpapi requests

from serpapi import GoogleSearch

# Function to search for the image online and check for deepfakes
def search_deepfakes(image_url, serpapi_api_key):
    params = {
        'q': image_url,
        'engine': 'google',
        'api_key': serpapi_api_key,
    }

    search = GoogleSearch(params)
    results = search.get_dict()

    # Process the search results and check for possible deepfakes
    if 'organic_results' in results:
        for result in results['organic_results']:
            print(result['title'], result['link'])
            # You can add more deepfake detection logic here, like comparing images or checking keywords.

from google.colab import files
import requests
from serpapi import GoogleSearch

# Step 1: Prompt the user to upload an image
uploaded = files.upload()

# Extract the uploaded image file name
image_path = list(uploaded.keys())[0]  # This retrieves the uploaded file name dynamically
print(f"Uploaded image path: {image_path}")

# Step 2: Upload image to ImgBB and get the URL
def upload_image_to_imgbb(image_path, api_key):
    url = "https://api.imgbb.com/1/upload"
    with open(image_path, 'rb') as image_file:
        response = requests.post(url, data={'key': api_key}, files={'image': image_file})

    if response.status_code == 200:
        image_url = response.json()['data']['url']
        print("Image uploaded successfully!")
        return image_url
    else:
        print(f"Error uploading to ImgBB: {response.json()}")
        return None

# Set up your ImgBB API key
imgbb_api_key = '47cf5c6318ae2fc7d1ea3305189942c4'  # Replace with your ImgBB API key

# Upload image to ImgBB and get URL
uploaded_image_url = upload_image_to_imgbb(image_path, imgbb_api_key)

# Step 3: Search for deepfakes using the uploaded image URL
def search_deepfakes(image_url, serpapi_api_key):
    params = {
        'q': image_url,
        'engine': 'google',
        'api_key': serpapi_api_key,
    }

    search = GoogleSearch(params)
    results = search.get_dict()

    # Process the search results and check for possible deepfakes
    if 'organic_results' in results:
        for result in results['organic_results']:
            print(f"Title: {result['title']}")
            print(f"URL: {result['link']}")
            # Add deepfake detection logic here if needed
            # Example: Report if a deepfake site is detected (add your custom checks)

# Set up your SerpApi API key
serpapi_api_key = 'd70b432deb7b0acfb440fada51e1446974913bb30cc753e78397752336b33db9'  # Replace with your SerpApi key

# If image uploaded successfully, search for deepfakes
if uploaded_image_url:
    print(f"Uploaded Image URL: {uploaded_image_url}")

    # Check for deepfakes using the uploaded image URL
    search_deepfakes(uploaded_image_url, serpapi_api_key)
else:
    print("Failed to upload image.")

from serpapi import GoogleSearch  # Import SerpAPI

# Function to search for the image online and check for deepfakes
def search_deepfakes(image_url, serpapi_api_key):
    params = {
        "q": image_url,  # Search for the image URL
        "api_key": serpapi_api_key,
        "engine": "google",
        "search_type": "image"  # Use image search
    }

    # Perform search using SerpAPI
    search = GoogleSearch(params)
    results = search.get_dict()

    # Check if any image results are found
    if "images_results" in results:
        images = results["images_results"]
        print(f"Found {len(images)} images that match the uploaded image.")
        for image in images:
            print(f"Image URL: {image['original']}")
    else:
        print("No deepfake matches found.")

# Check if the image is uploaded successfully and proceed with searching
if uploaded_image_url:
    print(f"Uploaded Image URL: {uploaded_image_url}")

    # Now search for the image online to check if it's a deepfake or used elsewhere
    search_deepfakes(uploaded_image_url, serpapi_api_key)
else:
    print("Failed to upload image.")

def check_if_deepfake(image_url):
    # Use your deepfake detection model or API to check if the image is a deepfake.
    # Example using a hypothetical deepfake API
    response = requests.post("https://deepfake-detection-api.com", data={'image_url': image_url})
    result = response.json()
    if result['is_deepfake']:
        return True
    return False

def search_deepfakes(image_url, serpapi_api_key):
    params = {
        "q": image_url,  # Search for the image URL
        "api_key": serpapi_api_key,
        "engine": "google",
        "search_type": "image"
    }

    # Perform search using SerpAPI
    search = GoogleSearch(params)
    results = search.get_dict()

    # Check if any image results are found
    if "images_results" in results:
        images = results["images_results"]
        print(f"Found {len(images)} images that match the uploaded image.")
        for image in images:
            image_url = image['original']
            print(f"Checking if {image_url} is a deepfake...")

            if check_if_deepfake(image_url):  # Call the deepfake detection function
                print(f"Deepfake detected at: {image_url}")
                # You can add code here to report the deepfake (e.g., log it, send an email, etc.)
            else:
                print(f"Real image found at: {image_url}")
    else:
        print("No deepfake matches found.")

def report_deepfake(image_url):
    print(f"Reporting deepfake found at: {image_url}")
    # Add your reporting logic here (e.g., send an email, log it, or notify authorities)